name: Build, test and deploy Python application to Cloud Run

on:
  push:
    branches:
      - 'feature/**'
      - 'develop'
      - 'staging'
      - 'master'
  # pull_request:
  #   branches: [master]
  # nhi1

jobs:
  build-test:
    if: startsWith(github.ref_name, 'feature/') || github.ref_name == 'develop' || github.ref_name == 'staging'
    runs-on: ubuntu-latest
    env:
      FLASK_APP: main.py
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: cicd-test        
          POSTGRES_PASSWORD: littlebo
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - name: check-environment
      id: check_env
      run: |
        if [[ "$GITHUB_REF_NAME" == "feature/"* ]]
        then
          echo "FLASK_ENV=LOCAL" >> $GITHUB_ENV
        elif [[ "$GITHUB_REF_NAME" == "develop" ]]
        then
          echo "FLASK_ENV=DEVELOPMENT" >> $GITHUB_ENV
        elif [[ "$GITHUB_REF_NAME" == "staging" ]]
        then
          echo "FLASK_ENV=STAGING" >> $GITHUB_ENV
        fi
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with unittest
      run: |
        if [[ "$GITHUB_REF_NAME" == "feature/"* ]]
        then
          flask db upgrade
        fi
        python -m unittest tests/test_user_service.py

  deploy:
    if: github.ref_name == 'develop' || github.ref_name == 'staging' || github.ref_name == 'master'
    runs-on: ubuntu-latest
    env:
      GAR_HOSTNAME: us-central1-docker.pkg.dev
      # GAR_REPOSITORY: ${{ secrets.GCP_APP_NAME }}
    steps:
    - name: check-environment
      id: check_env
      run: |
        if [[ "$GITHUB_REF_NAME" == "develop" ]]
        then
          echo "FLASK_ENV=DEVELOPMENT" >> $GITHUB_ENV
          echo "GCP_PROJECT=${{ secrets.GCP_PROJECT_ID_DEV }}" >> $GITHUB_ENV
          echo "::set-output name=GCP_PROJECT::${{ secrets.GCP_PROJECT_ID_DEV }}"
          echo "GCP_EMAIL=${{ secrets.GCP_EMAIL_DEV }}" >> $GITHUB_ENV
          echo "::set-output name=GCP_EMAIL::${{ secrets.GCP_EMAIL_DEV }}"

          echo "GCP_EMAIL okkkkkkkkkkkkkkk"

          echo "GCP_CREDENTIALS=${{ secrets.GCP_CREDENTIALS_DEV }}" >> $GITHUB_ENV
          echo "::set-output name=GCP_CREDENTIALS::${{ secrets.GCP_CREDENTIALS_DEV }}"

          echo "GCP_CREDENTIALS okkkkkkkkkkkkkkk"

          echo "GAR_REPOSITORY=${{ secrets.GAR_REPOSITORY_DEV }}" >> $GITHUB_ENV
        elif [[ "$GITHUB_REF_NAME" == "staging" ]]
        then
          echo "FLASK_ENV=STAGING" >> $GITHUB_ENV
          echo "GCP_PROJECT=${{ secrets.GCP_PROJECT_ID_STG }}" >> $GITHUB_ENV
          echo "::set-output name=GCP_PROJECT::${{ secrets.GCP_PROJECT_ID_STG }}"
          echo "GCP_EMAIL=${{ secrets.GCP_EMAIL_STG }}" >> $GITHUB_ENV
          echo "::set-output name=GCP_EMAIL::${{ secrets.GCP_EMAIL_STG }}"
          echo "GCP_CREDENTIALS=${{ secrets.GCP_CREDENTIALS_STG }}" >> $GITHUB_ENV
          echo "::set-output name=GCP_CREDENTIALS::${{ secrets.GCP_CREDENTIALS_STG }}"
          echo "GAR_REPOSITORY=${{ secrets.GAR_REPOSITORY_STG }}" >> $GITHUB_ENV
        elif [[ "$GITHUB_REF_NAME" == "master" ]]
        then
          echo "FLASK_ENV=PRODUCTION" >> $GITHUB_ENV
          echo "GCP_PROJECT=${{ secrets.GCP_PROJECT_ID_PROD }}" >> $GITHUB_ENV
          echo "::set-output name=GCP_PROJECT::${{ secrets.GCP_PROJECT_ID_PROD }}"
          echo "GCP_EMAIL=${{ secrets.GCP_EMAIL_PROD }}" >> $GITHUB_ENV
          echo "::set-output name=GCP_EMAIL::${{ secrets.GCP_EMAIL_PROD }}"
          echo "GCP_CREDENTIALS=${{ secrets.GCP_CREDENTIALS_PROD }}" >> $GITHUB_ENV
          echo "::set-output name=GCP_CREDENTIALS::${{ secrets.GCP_CREDENTIALS_PROD }}"
          echo "GAR_REPOSITORY=${{ secrets.GAR_REPOSITORY_PROD }}" >> $GITHUB_ENV
        fi
    # - name: Login
    #   uses: google-github-actions/setup-gcloud@v0
    #   with:
    #     # project_id: ${{ secrets.GCP_PROJECT_ID }}
    #     project_id: ${{ steps.check_env.outputs.GCP_PROJECT }}
    #     service_account_email: ${{ steps.check_env.outputs.GCP_EMAIL }}
    #     service_account_key: ${{ steps.check_env.outputs.GCP_CREDENTIALS }}

    # - name: Configure Docker
    #   run: gcloud auth configure-docker "$GAR_HOSTNAME" --quiet

    # - name: Checkout repository
    #   uses: actions/checkout@v3

    # - name: Build Docker image
    #   run: |
    #     IMAGE_NAME="$GAR_HOSTNAME/$GCP_PROJECT/$GAR_REPOSITORY/$GAR_REPOSITORY:$GITHUB_SHA"
    #     docker build . -t $IMAGE_NAME

    # - name: Push Docker image
    #   run: |
    #     IMAGE_NAME="$GAR_HOSTNAME/$GCP_PROJECT/$GAR_REPOSITORY/$GAR_REPOSITORY:$GITHUB_SHA"
    #     docker push $IMAGE_NAME

    # - name: Deploy Docker image
    #   run: |
    #     IMAGE_NAME="$GAR_HOSTNAME/$GCP_PROJECT/$GAR_REPOSITORY/$GAR_REPOSITORY:$GITHUB_SHA"
    #     GCP_SERVICE_NAME="${{ secrets.GCP_APP_NAME }}-${FLASK_ENV,,}"
    #     gcloud run deploy $GCP_SERVICE_NAME --image $IMAGE_NAME --region us-central1 --platform managed --allow-unauthenticated --set-env-vars "FLASK_ENV=$FLASK_ENV"
